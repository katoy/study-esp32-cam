# ESP32-CAM Blink Project Suite

最小限実装による ESP32-CAM LED 制御プロジェクト集

## 📋 概要

このプロジェクトは、ESP32-CAM の GPIO4 LED を 1% 明度で制御するための最小限実装です。学習とデバッグに最適な、シンプルで理解しやすいコード構成を提供します。

## 🏗️ プロジェクト構成

```
📂 study-esp32-cam/ardiono/blink/
├── 📁 Blink/                     # 基本LED制御
│   └── 📄 Blink.ino             # 140行 - 学習用
│
├── 📁 Blink-Interactive/         # 監視機能付きLED制御
│   └── 📄 Blink-Interactive.ino # 186行 - デバッグ用
│
├── 📄 README.md                  # プロジェクト説明
├── 📄 automated_test.sh          # 自動テストスクリプト
└── 📄 upload_blink.sh           # アップロードスクリプト
```

## 🚀 主要機能

### 共通機能
- **1% 明度LED制御**: 目視確認可能な最小明度
- **PWM制御**: ESP32 Core 3.x LEDC API 対応
- **1秒間隔点滅**: 安定した動作確認
- **シリアル出力**: 詳細な状態ログ
- **完全独立**: 外部ライブラリ依存なし

### 技術仕様
- **GPIO**: GPIO4 (ESP32-CAM フラッシュLED)
- **PWM周波数**: 5kHz
- **PWM解像度**: 8-bit (0-255)
- **1%明度**: PWM値 3
- **シリアル速度**: 115200 baud

## 📦 プロジェクト詳細

### Blink (基本プロジェクト)
- **行数**: 140行
- **目的**: ESP32-CAM LED制御の学習と基本動作確認
- **特徴**:
  - 完全独立実装（外部ライブラリ不要）
  - 1% 明度で1秒間隔点滅
  - 詳細なシリアルログ出力
  - 統計情報表示（10回毎）
- **用途**: 初学者の学習、基本動作確認

### Blink-Interactive (監視プロジェクト)
- **行数**: 186行
- **目的**: LED動作の監視とデバッグ
- **特徴**:
  - リアルタイム状態監視
  - シンプルコマンドインターフェース
  - 詳細システム情報表示
  - 監視モード切り替え
- **コマンド**:
  ```
  status (s)   # 詳細ステータス表示
  monitor (m)  # 監視モード切り替え
  reset (r)    # カウンタリセット
  help (h/?)   # ヘルプ表示
  ```

## 🔧 設定とビルド

### 必要環境
- **ハードウェア**: ESP32-CAM (AI Thinker)
- **Arduino IDE**: 2.0 以降
- **ESP32 Core**: 3.x (LEDC API 対応)
- **シリアル**: CH340 USB-Serial (/dev/cu.usbserial-1130)

### ビルド手順
```bash
# Arduino CLI を使用
arduino-cli compile --fqbn esp32:esp32:esp32cam Blink
arduino-cli compile --fqbn esp32:esp32:esp32cam Blink-Interactive

# アップロード
./upload_blink.sh  # 便利スクリプト使用
# または
arduino-cli upload --fqbn esp32:esp32:esp32cam --port /dev/cu.usbserial-1130 Blink
```

### 自動テスト実行
```bash
# 完全自動テスト (推奨)
./automated_test.sh

# 主な機能:
# - ハードウェア接続確認
# - 自動コンパイル・アップロード
# - LED動作検証
# - 詳細レポート生成
```

### メモリ使用量 (コンパイル時)
| プロジェクト | フラッシュ | RAM | 使用率 |
|-------------|----------|-----|--------|
| Blink | 304KB | 21KB | 9%/6% |
| Blink-Interactive | 306KB | 21KB | 9%/6% |

## 🎯 クイックスタート

### 1. 基本使用 (Blink)
1. `Blink.ino` をアップロード
2. シリアルモニタ (115200 baud) を開く
3. LED点滅とログを確認

### 2. 監視使用 (Blink-Interactive)
1. `Blink-Interactive.ino` をアップロード
2. シリアルモニタ (115200 baud) を開く
3. `status` コマンドで詳細情報確認
4. `monitor` で監視モード切り替え

## 📊 技術仕様

### PWM 設定
```cpp
#define LED_PIN 4                // ESP32-CAM フラッシュLEDピン
#define PWM_FREQUENCY 5000       // PWM周波数 (Hz)
#define PWM_RESOLUTION 8         // PWM解像度 (bit)
#define LED_BRIGHTNESS_1PCT 3    // 1%明度 (PWM値)
#define BLINK_INTERVAL_MS 1000   // 点滅間隔 (ms)
#define SERIAL_BAUD 115200       // シリアル通信速度
```

### LED制御関数
```cpp
void initLED()      // LED初期化
void ledOn()        // LED ON (1%明度)
void ledOff()       // LED OFF
void performBlink() // 点滅処理
```

## 🧪 動作確認

### LED動作確認
1. **目視確認**: 薄暗い環境で1%明度のLEDが点滅
2. **シリアル確認**: ログで詳細な状態監視
3. **統計確認**: 点滅回数、実行時間、メモリ使用量

### 期待される出力例
```
[  1000 ms] LED: ON  | Blinks: 1
[  2000 ms] LED: OFF | Blinks: 1
[  3000 ms] LED: ON  | Blinks: 2
...
📊 Status: 10 blinks completed
⏱️  Runtime: 20.0 seconds
🔄 Blink rate: 30.0 blinks/min
💡 LED brightness: 1% (PWM: 3)
💾 Free heap: 280.5 KB
```

## 📚 バージョン履歴

### v3.0.0 (2025-10-19) - 最小限実装アーキテクチャ
- 🎯 **完全独立化**: 外部ライブラリ依存を完全排除
- 📉 **大幅簡素化**:
  - Blink: 140行 (従来比60%削減)
  - Blink-Interactive: 186行 (従来比69%削減)
- 🧹 **プロジェクト整理**: 不要ファイル削除、構成簡素化
- 💡 **1%明度最適化**: 目視確認可能な最小明度に調整
- 🛠️ **保守性向上**: 理解しやすいコード構造
- 🚀 **学習最適化**: ESP32-CAM LED制御学習に最適

### v2.0.0 (2025-01-18) - 統一ライブラリアーキテクチャ
- 統一 `esp32_cam_common` ライブラリ導入
- 包括的エラーハンドリング実装
- ESP32 Core 3.x LEDC API 対応
- パフォーマンス監視機能追加
- 包括的テストスイート

### v1.0.0 (Previous)
- 基本 LED 制御機能
- 個別プロジェクト実装

## 🤝 貢献とサポート

### 開発理念
1. **最小限主義**: 必要最小限の機能のみ実装
2. **理解しやすさ**: 初学者でも理解できるコード
3. **独立性**: 外部依存を避けた自己完結型
4. **学習重視**: ESP32-CAM学習に最適化

### ファイル構成の原則
- **Blink**: 学習・基本動作確認用の最小実装
- **Blink-Interactive**: デバッグ・監視用の軽量版
- **完全分離**: 各プロジェクトは独立して動作

## 📞 サポート

- **学習目的**: コードを読んで理解を深める
- **動作確認**: シリアル出力で詳細確認
- **問題解決**: 各プロジェクトが独立しているため分離して確認

## 📄 ライセンス

Public Domain - 自由に使用、改変、配布可能

---
**ESP32-CAM LED Control Learning Project** | Version 3.0.0 | 2025-10-19